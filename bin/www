#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('00-vooked:server');
var http = require('http');
const bcrypt = require('bcryptjs')
const randomPhrase = require('randomstring')
var email = require('nodemailer')


//bring the admin model
let Admin = require('../models/admin')

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
* Create HTTP server.
*/

var server = http.createServer(app);

/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//generating password for admins
const password = randomPhrase.generate(10)
const username = randomPhrase.generate(5)

//sending email
var transporter = email.createTransport({
  service: 'gmail',
  auth: {
    user: 'sendermail87@gmail.com',
    pass: 'mailsender87'
  },
  secure: true
})

var mailOptions = {
  from: 'sendermail87@gmail.com',
  to: 'elgalo1987@gmail.com',
  subject: 'New User-Name and Password',
  text: 'User-Name: ' + username + '\n'
  + 'Password: ' + password
}

transporter.sendMail(mailOptions, function(err, info){
  if (err){
    throw err
  } else {
    console.log('email sent: ' + info.response)
  }
})

console.log(username)
console.log(password)

bcrypt.genSalt(10, (err, salt) => {
  bcrypt.hash(password, 10, (err, hash) => {
    if (err) {console.log(err)}

    let admin = new Admin()
    admin.username = username
    admin.password = hash

    Admin.remove({}, (err, removed)=>{
       if (err) throw err

       console.log('Removed')
    })
    admin.save((err) => {
      if (err) {
        console.log(err)
        return
      } else {
        console.log('Updated')
      }
    })
  })
})


/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
